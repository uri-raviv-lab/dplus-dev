# This Dockerfile is used for building manylinux wheels of this package.
#
# Then run it to save the generated wheels to d:\temp\pyceres-wheels. Just change the mount point to
# any other directory you want.
#
#    docker build -f Dockerfile.manylinux .. -t dplus-api-manylinux:latest --build-arg GITHUB_VERSION=<version>
#    docker run --rm --name dplus-api-manylinux -v <path-to-where-you-want-the-wheels>:/external dplus-api-manylinux:latest
#
# Note: DO NOT PUSH THIS TO Dockerhub - it makes no sense

# Step 1 - build the backend libraries
FROM nvidia/cuda:11.3.1-devel-ubuntu16.04 AS cplusplus

# Step 1.1 - Install the necessary Ubuntu Packages
RUN apt update

# CMake (https://askubuntu.com/a/595441/259462)
RUN apt install wget
RUN wget https://github.com/Kitware/CMake/releases/download/v3.22.2/cmake-3.22.2-linux-x86_64.sh
RUN sh cmake-3.22.2-linux-x86_64.sh --skip-license
RUN ln -s /opt/cmake/bin/cmake /usr/local/bin/cmake

# Other packages
RUN DEBIAN_FRONTEND=noninteractive apt-get install -y tzdata
RUN apt install -y libboost-all-dev

# Step 1.2 - Copy the source files we need
COPY Backend /src/Backend
COPY BackendCommunication /src/BackendCommunication
COPY Common /src/Common
COPY Conversions /src/Conversions
COPY DebyeCalculator /src/DebyeCalculator
COPY pdbgen /src/pdbgen
COPY PDBManipulator /src/PDBManipulator
COPY PDBReaderLib /src/PDBReaderLib
COPY PDBUnits /src/PDBUnits
COPY Population /src/Population
COPY PropertySheets /src/PropertySheets
COPY backend_version.h /src
COPY CMakeLists.txt /src

# Step 1.3 - Build
RUN mkdir /src/build
WORKDIR /src/build
RUN cmake ..
RUN make

# Step 1.4 - Get files ready for the next step
# Step 1.4.1 - our compiled files
RUN mkdir /output
RUN cp /src/build/Backend/lib* /output

# Step 1.4.2 - shared objects used by the backend
RUN cp /usr/lib/x86_64-linux-gnu/libboost_system.so.1.58.0 /output
RUN cp /usr/lib/x86_64-linux-gnu/libboost_filesystem.so.1.58.0 /output
RUN cp /usr/local/cuda-11.3/targets/x86_64-linux/lib/libcurand.so.10 /output
RUN cp /usr/local/cuda-11.3/targets/x86_64-linux/lib/libcudart.so.11.0 /output

# Step 2 - build the Python API
FROM quay.io/pypa/manylinux_2_24_x86_64 AS python
WORKDIR /src/PythonInterface

ARG GITHUB_VERSION
ENV GITHUB_VERSION=$GITHUB_VERSION

COPY --from=cplusplus /output /src/PythonInterface/lib 
COPY ./PythonInterface/requirements.txt /src/PythonInterface/requirements.txt
# Install all requirements for all Python versions
RUN /opt/python/cp38-cp38/bin/pip install -r requirements.txt
RUN /opt/python/cp39-cp39/bin/pip install -r requirements.txt
RUN /opt/python/cp310-cp310/bin/pip install -r requirements.txt
RUN /opt/python/cp311-cp311/bin/pip install -r requirements.txt
RUN /opt/python/cp312-cp312/bin/pip install -r requirements.txt

# Now we can copy everything else - first the none-dplus-api files
COPY ./Backend /src/Backend
COPY ./Common /src/Common
COPY ./Conversions /src/Conversions

# And finally, the dplus-api source files.
COPY ./PythonInterface /src/PythonInterface

# Prepare for building the wheel - precompile pyx files and move header files around
RUN /opt/python/cp38-cp38/bin/python setup.py prepare

# Now we can build all the wheels
RUN /opt/python/cp38-cp38/bin/pip wheel .
RUN /opt/python/cp39-cp39/bin/pip wheel .
RUN /opt/python/cp310-cp310/bin/pip wheel .
RUN /opt/python/cp311-cp311/bin/pip wheel .
RUN /opt/python/cp312-cp312/bin/pip wheel .

RUN mkdir /wheels
ENV LD_LIBRARY_PATH=/src/PythonInterface/dplus
RUN find . -name "dplus_api*whl" -exec auditwheel repair {} -w /wheels \;

ENTRYPOINT [ "cp", "-r", "/wheels", "/external/dplus-api-wheels" ]
